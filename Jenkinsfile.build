pipeline {
    agent any

    options {
        skipStagesAfterUnstable()
    }

    environment {
        POTENTIAL_VERSION = sh(returnStdout: true, script: 'echo "$(date +%Y.%-m.%-d)"').trim()
    }

    stages {
		stage('Setup') {
            steps {
                script {
                    env.GIT_LOCAL_BRANCH = get_git_branch(env.GIT_BRANCH)
                }

                sh 'chmod +x build/*.sh'
                sh 'az login --identity'
                sh 'gh auth status'
            }
        }
        stage('Install') {
            environment {
                CURRENT_COMMIT = sh(returnStdout: true, script: 'git log -1 | sed -n "s/^commit //p"').trim()
            }
            steps {
                script {
                    sh 'build/notify-github.sh "pending" "Setting up environment"'
                    sh 'npm ci'
                    sh 'git tag -d "v${POTENTIAL_VERSION}" || true' // Remove local git tags
                    sh 'git tag -a "v${POTENTIAL_VERSION}" -m "Version ${POTENTIAL_VERSION}"'
                    sh 'npm version from-git --no-git-tag-version'
                    sh 'rm -rf ./out'
                    sh 'npm run make -- --platform win32'
                    sh 'npm run make -- --platform linux'
                    // sh 'npm run make -- --platform darwin' Not supported on Jenkins machine
                }
            }
        }
        stage('Test') {
            environment {
                // https://www.electronjs.org/docs/latest/tutorial/testing-on-headless-ci
                // https://stackoverflow.com/a/40678605
                DISPLAY = '1'
            }
            steps {
                script {
                    sh 'build/notify-github.sh "pending" "Testing"'
                    sh 'npm test'
                    sh 'npm run wdio-headless'
                }
            }
        }
        stage('Scan') {
            environment {
                // SNYK
                SNYK_TOKEN = credentials('snyk')
                SNYK_CFG_ORG = 'guaranty-support-inc'
            }
            steps {
                script {
                    sh 'build/notify-github.sh "pending" "Synk Scan"'
                    sh 'snyk.sh auth ${SNYK_TOKEN}'
                    sh 'snyk.sh test'
                    // sh 'snyk.sh code test'
                }
            }
        }
        stage('Remote Build') {
            steps {
                script {
                    sh 'build/notify-github.sh "pending" "Publishing"'
                    sh 'git push origin "v${POTENTIAL_VERSION}"'
                    withEnv(["GITHUB_TOKEN=" + sh(returnStdout: true, script: 'gh auth token').trim()]) {
                        sh 'npx electron-forge publish'
                    }

                    // For each file in ./out/make, upload it to the listed release and overwrite existing files just in case.
                    sh 'find ./out/make -type f -print0 | xargs -0 -Ifile gh release upload "v${POTENTIAL_VERSION}" file --clobber'
                    sh 'gh release edit "v${POTENTIAL_VERSION}" --tag=v${POTENTIAL_VERSION} --verify-tag'
                }
            }
        }
    }
    post {
        success {
            sh 'build/notify-github.sh "success" "Build was successful"'
        }
        failure {
            sh 'build/notify-github.sh "failure" "Testing has failed"'
        }
        aborted {
            sh 'build/notify-github.sh "failure" "Build was aborted partway"'
        }
    }
}

def get_git_branch(String branch) {
    return branch.substring(branch.indexOf('/') + 1)
}

def expose_jenkins_properties_to_env() {
    env.JENKINS_RESULT = currentBuild.result
    env.JENKINS_DURATION = currentBuild.duration
}
